name: "Slack Notification"
description: "Send Slack notifications with different messages for start, success, and failure."
inputs:
  type:
    description: "Type of notification: start, success, or failure."
    required: true
  webhook_url:
    description: "The Slack webhook URL to send the notification."
    required: true

runs:
  using: "composite"
  steps:
    - name: "Determine JSON File"
      id: select-json
      run: |
        case "${{ inputs.type }}" in
          start)
            json_file="${GITHUB_WORKSPACE}/manifests/slack-notify/start.json"
            ;;
          success)
            json_file="${GITHUB_WORKSPACE}/manifests/slack-notify/success.json"
            ;;
          failure)
            json_file="${GITHUB_WORKSPACE}/manifests/slack-notify/failure.json"
            ;;
          *)
            echo "Invalid notification type" && exit 1
            ;;
        esac
        echo "json_file=$json_file" >> $GITHUB_ENV
        echo "json_file: $json_file"
      shell: bash

    - name: "Send Slack Notification"
      env:
        JSON_FILE: ${{ env.json_file }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_COMMIT_HASH: ${{ github.sha }}
      run: |
        if [ ! -f "$JSON_FILE" ]; then
          echo "Error: JSON file not found at $JSON_FILE"
          exit 1
        fi
        
        REPO_NAME=$(basename ${{ github.repository }})
        BRANCH_NAME=$(basename ${{ github.ref }})
        COMMIT_SHORT_HASH=$(echo ${{ github.sha }} | cut -c1-7)

        export REPO_NAME
        export BRANCH_NAME
        export GITHUB_ACTOR
        export GITHUB_RUN_ID
        export COMMIT_SHORT_HASH

        envsubst < "$JSON_FILE" > "temp.json"
  
        curl -X POST -H 'Content-type: application/json' \
        --data @"temp.json" "${{ inputs.webhook_url }}"
      shell: bash
